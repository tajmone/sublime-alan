-- SYNTAX TEST "Packages/Alan_IF/Alan IF.sublime-syntax"

-- ======================
-- Test Class Definitions
-- ======================

-- with optional ID & terminator at END:
EVERY cake IsA object. -- comment
--^^^                  meta.class.alan    storage.type.class.alan
--             ^^^^^^  meta.class.alan    entity.other.inherited-class.alan
--                   ^ meta.class.alan    punctuation.terminator.alan
--    ^^^^             meta.class.alan    entity.name.class.alan
--         ^^^         meta.class.alan    storage.modifier.extends
END EVERY cake.
-- ^^^^^^^^^^^^        meta.class.alan
--        ^^^^                            entity.name.class.tail.alan
--            ^                           punctuation.terminator.alan


-- without ID & terminator:
EVERY car IsA object
END EVERY  
-- ^^^^^^ meta.class.alan keyword.control.alan


-- without ID at END:
EVERY chip IsA object
END EVERY.
-- ^^^^^^ meta.class.alan keyword.control.alan
--       ^ meta.class.alan punctuation.terminator.alan

-- with ID at END:
EVERY toy IsA object -- comment
END EVERY toy.
--        ^^^ meta.class.alan entity.name.class.tail.alan
--           ^ meta.class.alan punctuation.terminator.alan


-- without terminator:
EVERY club IsA object
END EVERY club
-- ^^^^^^ meta.class.alan keyword.control.alan
--        ^^^^ meta.class.alan entity.name.class.tail.alan

----------------------------------------
-- With Quoted Identifiers
----------------------------------------
-- Make sure that quoted identifiers are handled well.
-- NOTE: The single-quote delimiters are part of the identifier!

EVERY 'Rock ''n'' Roll' IsA 'music genre'.
--    ^^^^^^^^^^^^^^^^^                        entity.name.class.alan
--                          ^^^^^^^^^^^^^      entity.other.inherited-class.alan
--                    ^                   punctuation.definition.identifier.alan
--                          ^             punctuation.definition.identifier.alan
--                                      ^ punctuation.definition.identifier.alan
END EVERY 'Rock ''n'' Roll'.
--        ^^^^^^^^^^^^^^^^^                    entity.name.class.tail.alan
--        ^                               punctuation.definition.identifier.alan
--                        ^               punctuation.definition.identifier.alan
----------------------------------------
-- Extra WhiteSpace Tests
----------------------------------------
-- Make sure extra spaces don't cause problems...

EVERY       cod_fish IsA object  .  
--                               ^      meta.class.alan   punctuation.terminator.alan
--                                ^^^   meta.class.alan - punctuation.terminator.alan
END EVERY   cod_fish  .  -- comment
--                  ^^                  meta.class.alan - entity.name.class.tail.alan
--                    ^                 meta.class.alan   punctuation.terminator.alan
--                     ^^ source.alan - meta.class.alan

----------------------------------------
-- Check for Scope Spillings
----------------------------------------
-- Test that scopes are correctly ended; ie, that they don't spill over
-- white space or comments, even when dealing with an incomplete sytnax
-- construct


EVERY cow IsA object  -- comment
--   ^^^^^^^^^^^^^^^^^^^^^^^^^^^        meta.class.alan - storage.type.class.alan
--       ^^^^^^^^^^^^^^^^^^^^^^^        meta.class.alan - entity.name.class.alan
--                  ^^^^^^^^^^^^        meta.class.alan - entity.other.inherited-class.alan
END EVERY cow.        -- comment
--       ^^^^^                          meta.class.alan - keyword.control.alan
--           ^^^^^^^^^^^^^^^^^^^            source.alan - entity.name.class.tail.alan

----------------------------------------
-- Ensure tha `meta.class` ends:
----------------------------------------
EVERY cow IsA object
END EVERY cow. -- comment
--            ^^^^^^^^^^^                   source.alan - meta.class.alan

EVERY cow IsA object
END EVERY -- comment
--       ^^^^^^^^^^^                        source.alan - meta.class.alan

EVERY cow IsA object
END EVERY cow.
--            ^                             source.alan - meta.class.alan

EVERY cow IsA object
END EVERY.
--        ^                                 source.alan - meta.class.alan

EVERY cow IsA object
END EVERY
--       ^                                  source.alan - meta.class.alan

-- ==================================================
-- Test Against Partially Valid Syntax Fragments
-- ==================================================
-- Partial syntaxes shouldn't break the whole context: the syntax should be able
-- to detect missing expected item and carry on to the next; most of all, in no
-- case the parser should end up trapped in the context -- always bail out.

-- WRONG: missing Class ID:
EVERY IsA object
-- <-                            meta.class.alan   storage.type.class.alan
--    ^^^                        meta.class.alan   storage.modifier.extends
--        ^^^^^^                 meta.class.alan   entity.other.inherited-class.alan
--   ^                           meta.class.alan - storage.type.class.alan
--       ^                       meta.class.alan - entity.other.inherited-class.alan
END EVERY.
--^^^^^^^                        meta.class.alan   keyword.control.alan
--       ^                       meta.class.alan   punctuation.terminator.alan
--        ^        source.alan - meta.class.alan

-- WRONG: missing Inheritance Class ID:
EVERY grue IsA.
--^^^                            meta.class.alan   storage.type.class.alan
--    ^^^^                       meta.class.alan   entity.name.class.alan
--         ^^^                   meta.class.alan   storage.modifier.extends
--            ^                  meta.class.alan   punctuation.terminator.alan
END EVERY.
-- ^^^^^^                        meta.class.alan   keyword.control.alan
--       ^                       meta.class.alan   punctuation.terminator.alan
--        ^        source.alan - meta.class.alan

-- WRONG: missing Class ID + `IsA` + Inherited Class ID:
EVERY -- comment
--    ^^^^^^^^^^                 meta.class.alan comment.line.double-dash.alan - storage - entity
END EVERY xyz.
--^^^^^^^                        meta.class.alan   keyword.control.alan
--        ^^^                    meta.class.alan   entity.name.class.tail.alan
--           ^                   meta.class.alan   punctuation.terminator.alan

-- WRONG: missing everything
EVERY  
--^^^                            meta.class.alan   storage.type.class.alan
--    ^^                         meta.class.alan - storage - entity
END EVERY
-- ^^^^^^                        meta.class.alan   keyword.control.alan
--       ^         source.alan - meta.class.alan
